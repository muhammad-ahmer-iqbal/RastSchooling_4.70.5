name: Build and deploy ASP.Net Core app on a FTP

env:
  DOTNET_VERSION: '8.0.x'                 # set this to the .NET Core version to use
  PUBLISHED_PATH: ./publish_output
  LOCAL_APP_DATA_PATH: ./DirectDeploy/App_Data
  LOCAL_APP_OFFLINE_PATH: ./DirectDeploy/App_offline

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy-1:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Check temp app offline exists
        run: ls -la ${{ env.LOCAL_APP_OFFLINE_PATH }}
        
      - name: Upload app_offline.htm to FTP
        uses: anvil-solutions/Fast-FTP-Action@2.1.3
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          method: ftp
          local_dir: ${{ env.LOCAL_APP_OFFLINE_PATH }}
          remote_dir: /
    
  build:
    needs: deploy-1
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{env.PUBLISHED_PATH}}
      
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.PUBLISHED_PATH}}
          
  deploy-2:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
          path: ${{env.PUBLISHED_PATH}}
      
      - name: Check publish output exists
        run: ls -la ${{env.PUBLISHED_PATH}}
        
      - name: Fast FTP
        # You may pin to the exact commit or the version.
        # uses: anvil-solutions/Fast-FTP-Action@de62eeaf1c409a96c7304f3bba8bf8194d0fa98f
        uses: anvil-solutions/Fast-FTP-Action@2.1.3
        with:
          # FTP server name (you may need to specify a port)
          server: ${{ secrets.FTP_HOST }}
          # FTP account username
          username: ${{ secrets.FTP_USERNAME }}
          # FTP account password
          password: ${{ secrets.FTP_PASSWORD }}
          # Protocol used to deploy (ftp or sftp)
          method: ftp
          # The local folder to copy, defaults to root project folder
          local_dir: ${{env.PUBLISHED_PATH}}
          remote_dir: /

      - uses: actions/checkout@v4

      - name: Check direct deploy exists
        run: ls -la ${{ env.LOCAL_APP_DATA_PATH }}
        
      - name: Fast FTP for Direct Deploy
        # You may pin to the exact commit or the version.
        # uses: anvil-solutions/Fast-FTP-Action@de62eeaf1c409a96c7304f3bba8bf8194d0fa98f
        uses: anvil-solutions/Fast-FTP-Action@2.1.3
        with:
          # FTP server name (you may need to specify a port)
          server: ${{ secrets.FTP_HOST }}
          # FTP account username
          username: ${{ secrets.FTP_USERNAME }}
          # FTP account password
          password: ${{ secrets.FTP_PASSWORD }}
          # Protocol used to deploy (ftp or sftp)
          method: ftp
          # The local folder to copy, defaults to root project folder
          local_dir: ${{ env.LOCAL_APP_DATA_PATH }}
          remote_dir: ${{ env.REMOTE_APP_DATA_PATH }}
